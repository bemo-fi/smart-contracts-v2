;; =============== Financial =====================

#include "imports/stdlib.fc";
#include "imports/utils.fc";
#include "imports/jetton_utils.fc";
#include "imports/financial_gas.fc";
#include "imports/unstake_request_utils.fc";
#pragma version =0.4.4;

;; =============== consts =============================

const MIN_TON_FOR_STORAGE = 1000000000; ;; 1 TON
const LOCKUP_FEE = 10000000; ;; 0.01 TON
const BURN_FEE = 10000000; ;; 0.01 TON
const UNSTAKE_FEE = 2000000; ;; 0.002 TON
const TON_FOR_JETTON_MINT = 20000000; ;; 0.02 TON
;; 6905(computational_gas_price) * 1000(cur_gas_price) = 6905000
;; ceil(6905000) = 10000000 ~= 0.01 TON
const PROVIDE_ADDRESS_FEE = 10000000; ;; 0.01 TON
const SEND_TON_FEE = 8000000; ;; 0.008 TON
const TRANSFER_JETTON_FEE = 50000000; ;; 0.05 TON
const MINIMUM_TON_FOR_POOLS = 20000000; ;; 0.02 TON
const TON_FOR_STAKE_NOTIFICATION = 10000000; ;; 0.01 TON

const COMMISSION_BASE = 1000;

;; time
const TIME::LOCKUP_PERIOD = 129600; ;; 36 hours = 129600s = 60s * 60m * 36h

;; anyone ops
const OP::SIMPLE_TRANSFER = 0x6eddbc97;
const OP::STAKE = 0x4253c4d5;
const OP::ACCEPT_REWARD = 0x4353307d;
const OP::PROVIDE_WALLET_ADDRESS = 0x2c76b973;
const OP::TAKE_WALLET_ADDRESS = 0xd1735400;
const OP::ACCEPT_TON = 0x73273971;
const OP::REFRESH_LOCKUP_CONFIG = 0x75339d14;
const OP::GET_POOLS = 0x2a158bc3;
const OP::PROVIDE_CURRENT_QUOTE = 0xad83913f;
const OP::TAKE_CURRENT_QUOTE = 0x0a420458;

;; jetton wallet ops
const OP::INTERNAL_TRANSFER = 0x178d4519;
const OP::BURN_NOTIFICATION = 0x7bdd97de;

;; admin ops
const OP::CHANGE_ADMIN = 0x79ceac0f;
const OP::CHANGE_TRANSACTION_ADMIN = 0x631a9e70;
const OP::CHANGE_CONTENT = 0x5773d1f5;
const OP::CHANGE_COMMISSION_FACTOR = 0x7bccc4f;
const OP::CHANGE_COMMISSION_ADDRESS = 0x792dc2c5;
const OP::SEND_COMMISSION = 0x7e4d3ce7;
const OP::UPDATE_CODE = 0x60c248ef;
const OP::TRANSFER_JETTON = 0xf8a7ea5;

;; transaction admin ops
const OP::SEND_TON_FROM_FINANCIAL = 0x13f22452;

;; unstake request ops
const OP::UNSTAKE = 0x492ab1b3;
const OP::UNSTAKE_NOTIFICATION = 0x90c80a07;
const OP::DEPLOY_UNSTAKE_REQUEST = 0x10a1ce75;
const OP::RETURN_UNSTAKE_REQUEST = 0x38633538;

;; errors
const ERROR::INVALID_COMMISSION_FACTOR = 46;

const ERROR::NOT_FROM_ADMIN = 73;
const ERROR::NOT_FROM_JETTON_WALLET = 74;
const ERROR::NOT_FROM_TRANSACTION_ADMIN = 75;
const ERROR::NOT_FROM_USTAKE_REQUEST = 76;

const ERROR::INSUFFICIENT_COMMISSION_BALANCE = 104;
const ERROR::MSG_VALUE_LESS_THAN_REWARD = 105;

;; global
global int jetton_total_supply;
global int ton_total_supply;

global int commission_total_supply;
global int commission_factor;
global slice commission_address;

global slice admin_address;
global slice transaction_address;

global cell content;

global cell jetton_wallet_code;

global int last_lockup_epoch;
global int lockup_supply;
global int next_lockup_supply;
global int later_lockup_supply;

global int next_unstake_request_index;
global cell unstake_request_code;


;; =============== storage =============================

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    jetton_total_supply = ds~load_coins();
    ton_total_supply = ds~load_coins();
    commission_total_supply = ds~load_coins();
    commission_factor = ds~load_uint(16);
    commission_address = ds~load_msg_addr();
    admin_address = ds~load_msg_addr();
    transaction_address = ds~load_msg_addr();
    content = ds~load_ref();
    jetton_wallet_code = ds~load_ref();

    slice lockup_config = ds~load_ref().begin_parse();
    last_lockup_epoch = lockup_config~load_uint(32);
    lockup_supply = lockup_config~load_coins();
    next_lockup_supply = lockup_config~load_coins();
    later_lockup_supply = lockup_config~load_coins();

    next_unstake_request_index = lockup_config~load_uint(64);
    unstake_request_code = lockup_config~load_ref();
}

() save_data() impure inline {
    set_data(begin_cell()
    .store_coins(jetton_total_supply)
    .store_coins(ton_total_supply)
    .store_coins(commission_total_supply)
    .store_uint(commission_factor, 16)
    .store_slice(commission_address)
    .store_slice(admin_address)
    .store_slice(transaction_address)
    .store_ref(content)
    .store_ref(jetton_wallet_code)
    .store_ref(begin_cell()
    .store_uint(last_lockup_epoch, 32)
    .store_coins(lockup_supply)
    .store_coins(next_lockup_supply)
    .store_coins(later_lockup_supply)
    .store_uint(next_unstake_request_index, 64)
    .store_ref(unstake_request_code)
    .end_cell())
    .end_cell()
    );
}


;; =============== utils =============================

int is_resolvable?(slice addr) inline {
    (int wc, _) = parse_std_addr(addr);

    return wc == BASECHAIN;
}

() mint(int query_id, slice to_address, int msg_value, int fwd_fee, int forward_ton_amount, cell forward_payload) impure inline_ref {

    int transfer_ton_amount = get_ton_amount_for_stake(forward_ton_amount, fwd_fee);

    int stake_ton_amount = msg_value - transfer_ton_amount;
    throw_unless(ERROR::INSUFFICIENT_MSG_VALUE, stake_ton_amount > 0);

    int stake_jetton_amount = muldiv(jetton_total_supply, stake_ton_amount, ton_total_supply);

    jetton_total_supply += stake_jetton_amount;
    ton_total_supply += stake_ton_amount;
    save_data();

    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);

    cell receive_msg = begin_cell()
    .store_op(OP::INTERNAL_TRANSFER)
    .store_query_id(query_id)
    .store_coins(stake_jetton_amount)
    .store_slice(my_address())
    .store_slice(to_address)
    .store_coins(forward_ton_amount)
    .store_maybe_ref(forward_payload)
    .end_cell();

    var msg = begin_cell()
    .store_msg_flags_and_address_none(FLAGS::BOUNCEABLE)
    .store_slice(to_wallet_address)
    .store_coins(transfer_ton_amount)
    .store_stateinit_ref_and_body_ref(state_init, receive_msg)
    .end_cell();

    send_raw_message(msg, SEND_MODE::REGULAR + SEND_MODE::IGNORE_ERRORS);
}

() deploy_unstake_request(int index, slice owner_address, int withdraw_ton_amount, int withdraw_jetton_amount, int lockup_timestamp, cell forward_payload) impure inline_ref {
    var unstake_data = begin_cell()
    .store_op(OP::DEPLOY_UNSTAKE_REQUEST)
    .store_slice(owner_address)
    .store_coins(withdraw_ton_amount)
    .store_coins(withdraw_jetton_amount)
    .store_maybe_ref(forward_payload)
    .store_uint(lockup_timestamp, 32)
    .end_cell();


    cell state_init = calculate_unstake_request_state_init(index, my_address(), unstake_request_code);
    slice unstake_request_address = calculate_unstake_request_address(state_init);

    var msg = begin_cell()
    .store_msg_flags_and_address_none(FLAGS::NON_BOUNCEABLE)
    .store_slice(unstake_request_address)
    .store_coins(0)
    .store_stateinit_ref_and_body_ref(state_init, unstake_data)
    .end_cell();

    send_raw_message(msg, SEND_MODE::CARRY_ALL_REMAINING_MESSAGE_VALUE);
}

() return_unstake_request(slice unstake_request_address, int lockup_timestamp) impure inline_ref {
    var unstake_data = begin_cell()
    .store_op(OP::RETURN_UNSTAKE_REQUEST)
    .store_uint(lockup_timestamp, 32)
    .end_cell();

    send_msg(unstake_request_address, 0, unstake_data, FLAGS::NON_BOUNCEABLE, SEND_MODE::CARRY_ALL_REMAINING_MESSAGE_VALUE);
}

() refresh_lockup_config() impure inline_ref {
    int current_epoch = now() / TIME::LOCKUP_PERIOD;
    int dif = current_epoch - last_lockup_epoch;

    if (dif == 1) {
        last_lockup_epoch = current_epoch;
        lockup_supply += next_lockup_supply;
        next_lockup_supply = later_lockup_supply;
        later_lockup_supply = 0;
    } elseif (dif > 1) {
        last_lockup_epoch = current_epoch;
        lockup_supply += next_lockup_supply + later_lockup_supply;
        next_lockup_supply = later_lockup_supply = 0;
    }
}

() migrate(cell old_storage) impure method_id {
    set_data(old_storage);
    throw(0);
}

;; =============== recv =============================

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice in_msg_full_slice = in_msg_full.begin_parse();
    int msg_flags = in_msg_full_slice~load_msg_flags();

    if (msg_flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = in_msg_full_slice~load_msg_addr();
    (int sender_wc, _) = parse_std_addr(sender_address);
    int fwd_fee_from_in_msg = in_msg_full_slice~retrieve_fwd_fee();
    int fwd_fee = get_original_fwd_fee(BASECHAIN, fwd_fee_from_in_msg); ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body.slice_empty?() ? OP::SIMPLE_TRANSFER : in_msg_body~load_op();

    load_data();

    if (op == OP::SIMPLE_TRANSFER) {
        throw_unless(ERROR::NOT_BASECHAIN, sender_wc == BASECHAIN); ;; only in basechain
        mint(0, sender_address, msg_value,  fwd_fee, TON_FOR_STAKE_NOTIFICATION, null());
        return ();
    }

    if (op == OP::STAKE) {
        throw_unless(ERROR::NOT_BASECHAIN, sender_wc == BASECHAIN); ;; only in basechain

        int query_id = in_msg_body~load_query_id();
        int forward_ton_amount = in_msg_body~load_coins();
        cell forward_payload = in_msg_body~load_maybe_ref();

        mint(query_id, sender_address, msg_value,  fwd_fee, forward_ton_amount, forward_payload);
        return ();
    }

    if (op == OP::ACCEPT_REWARD) { ;; accept coins with reward
        int reward = in_msg_body~load_coins();
        throw_unless(ERROR::MSG_VALUE_LESS_THAN_REWARD, msg_value >= reward);

        if (reward > 0) {
            int commission = muldiv(reward, commission_factor, COMMISSION_BASE);
            ton_total_supply += (reward - commission);
            commission_total_supply += commission;
            save_data();
        }
        return ();
    }

    if (op == OP::BURN_NOTIFICATION) {
        in_msg_body~skip_query_id();
        int withdraw_jetton_amount = in_msg_body~load_coins();
        slice owner_address = in_msg_body~load_msg_addr();
        slice receiver_address = in_msg_body~load_msg_addr();
        cell forward_payload = in_msg_body~load_maybe_ref();
        throw_unless(ERROR::NOT_FROM_JETTON_WALLET,
            equal_slices(calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code), sender_address)
        );

        int withdraw_ton_amount = muldiv(ton_total_supply, withdraw_jetton_amount, jetton_total_supply);

        throw_unless(ERROR::INSUFFICIENT_MSG_VALUE, (msg_value - get_ton_amount_for_burn_notification(forward_payload, fwd_fee)) > 0);

        refresh_lockup_config();

        int unlock_timestamp = (last_lockup_epoch + 2) * TIME::LOCKUP_PERIOD;

        ton_total_supply -= withdraw_ton_amount;
        jetton_total_supply -= withdraw_jetton_amount;
        next_unstake_request_index += 1;
        later_lockup_supply += withdraw_ton_amount;

        save_data();

        deploy_unstake_request(next_unstake_request_index - 1, receiver_address, withdraw_ton_amount, withdraw_jetton_amount, unlock_timestamp, forward_payload);

        return ();
    }

    if (op == OP::UNSTAKE) {
        var index = in_msg_body~load_uint(64);
        cell state_init = calculate_unstake_request_state_init(index, my_address(), unstake_request_code);
        slice unstake_request_address = calculate_unstake_request_address(state_init);

        throw_unless(ERROR::NOT_FROM_USTAKE_REQUEST, equal_slices(unstake_request_address, sender_address));

        var owner_address = in_msg_body~load_msg_addr();
        var withdraw_ton_amount = in_msg_body~load_coins();
        var withdraw_jetton_amount = in_msg_body~load_coins(); ;; currently unused
        var forward_payload = in_msg_body~load_maybe_ref();

        if (balance >= withdraw_ton_amount + msg_value) {

            refresh_lockup_config();

            lockup_supply -= withdraw_ton_amount;

            var unstake_amount = withdraw_ton_amount + msg_value - get_ton_amount_for_unstake(fwd_fee);

            int ton_balance_after_unstake = balance - unstake_amount;
            int min_storage_fee = calculate_financial_min_storage_fee();
            int storage_fee = min_storage_fee - min(ton_balance_after_unstake, min_storage_fee);

            cell payload = begin_cell()
            .store_op(OP::UNSTAKE_NOTIFICATION)
            .store_query_id(0)
            .store_maybe_ref(forward_payload)
            .end_cell();

            send_msg(owner_address, unstake_amount - storage_fee, payload, FLAGS::NON_BOUNCEABLE, SEND_MODE::IGNORE_ERRORS);
            save_data();
        } else {
            return_unstake_request(unstake_request_address, now() + (TIME::LOCKUP_PERIOD / 2));
        }
        return ();
    }

    if (op == OP::GET_POOLS) { ;; return ton and jetton pools values

        throw_unless(ERROR::INSUFFICIENT_MSG_VALUE, msg_value >= MINIMUM_TON_FOR_POOLS);

        var msg = begin_cell()
        .store_op(OP::GET_POOLS)
        .store_coins(jetton_total_supply)
        .store_coins(ton_total_supply)
        .end_cell();

        send_msg(sender_address, 0, msg, FLAGS::NON_BOUNCEABLE, SEND_MODE::CARRY_ALL_REMAINING_MESSAGE_VALUE);

        return ();
    }

    if (op == OP::PROVIDE_CURRENT_QUOTE) {
        throw_unless(ERROR::INSUFFICIENT_MSG_VALUE, msg_value >= MINIMUM_TON_FOR_POOLS);

        int query_id = in_msg_body~load_query_id();
        cell custom_payload = in_msg_body~load_maybe_ref();

        var msg = begin_cell()
        .store_op(OP::TAKE_CURRENT_QUOTE)
        .store_query_id(query_id)
        .store_uint(ton_total_supply, 128)
        .store_uint(jetton_total_supply, 128)
        .store_maybe_ref(custom_payload)
        .end_cell();

        send_msg(sender_address, 0, msg, FLAGS::NON_BOUNCEABLE, SEND_MODE::CARRY_ALL_REMAINING_MESSAGE_VALUE);

        return ();
    }

    if (op == OP::PROVIDE_WALLET_ADDRESS) {
        throw_unless(ERROR::INSUFFICIENT_MSG_VALUE, msg_value > fwd_fee + PROVIDE_ADDRESS_FEE);
        int query_id = in_msg_body~load_query_id();

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
        ? begin_cell().store_slice(owner_address).end_cell()
        : null();

        var msg = begin_cell()
        .store_msg_flags_and_address_none(FLAGS::NON_BOUNCEABLE)
        .store_slice(sender_address)
        .store_coins(0)
        .store_prefix_only_body()
        .store_op(OP::TAKE_WALLET_ADDRESS)
        .store_query_id(query_id);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code));
        } else {
            msg = msg.store_address_none();
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), SEND_MODE::CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE::BOUNCE_ON_ACTION_FAIL);
        return ();
    }

    if (op == OP::CHANGE_ADMIN) { ;; change admin
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        admin_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    if (op == OP::CHANGE_TRANSACTION_ADMIN) { ;; change transaction admin
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        transaction_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    if (op == OP::CHANGE_CONTENT) { ;; change content, delete this for immutable tokens
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        content = in_msg_body~load_ref();
        save_data();
        return ();
    }

    if (op == OP::CHANGE_COMMISSION_FACTOR) { ;; change commission factor
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        commission_factor = in_msg_body~load_uint(16);
        throw_unless(ERROR::INVALID_COMMISSION_FACTOR, commission_factor <= COMMISSION_BASE);
        save_data();
        return ();
    }

    if (op == OP::CHANGE_COMMISSION_ADDRESS) { ;; change commission address
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        commission_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    int ton_balance_before_msg = balance - msg_value;

    if (op == OP::SEND_TON_FROM_FINANCIAL) { ;; send ton
        throw_unless(ERROR::NOT_FROM_TRANSACTION_ADMIN, equal_slices(sender_address, transaction_address));
        throw_unless(ERROR::INSUFFICIENT_MSG_VALUE, msg_value >= SEND_TON_FEE);
        slice destination_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        var payload = in_msg_body~load_maybe_ref();
        throw_unless(ERROR::INSUFFICIENT_BALANCE, ton_balance_before_msg - lockup_supply - MIN_TON_FOR_STORAGE >= amount);
        send_msg(destination_address, amount, payload, FLAGS::BOUNCEABLE, SEND_MODE::PAY_FEES_SEPARATELY + SEND_MODE::IGNORE_ERRORS);
        return ();
    }

    if (op == OP::SEND_COMMISSION) { ;; send commission
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        throw_unless(ERROR::INSUFFICIENT_MSG_VALUE, msg_value >= SEND_TON_FEE);
        throw_unless(ERROR::INSUFFICIENT_COMMISSION_BALANCE, commission_total_supply > 0);
        throw_unless(ERROR::INSUFFICIENT_BALANCE, ton_balance_before_msg - lockup_supply - commission_total_supply - MIN_TON_FOR_STORAGE >= 0);
        send_msg(commission_address, commission_total_supply, null(), FLAGS::NON_BOUNCEABLE, SEND_MODE::PAY_FEES_SEPARATELY + SEND_MODE::IGNORE_ERRORS);
        commission_total_supply = 0;
        save_data();
        return ();
    }

    if (op == OP::ACCEPT_TON) { ;; just accept ton
        return ();
    }

    if (op == OP::REFRESH_LOCKUP_CONFIG) {
        throw_unless(ERROR::INSUFFICIENT_MSG_VALUE, msg_value >= LOCKUP_FEE);
        load_data();
        refresh_lockup_config();
        save_data();
        return ();
    }

    if (op == OP::UPDATE_CODE) { ;; upgrade code
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        cell old_storage_layout = get_data();
        cell new_code = in_msg_body~load_ref();
        in_msg_body.end_parse();
        set_code(new_code);
        set_c3(new_code.begin_parse().bless());
        migrate(old_storage_layout);
        return ();
    }

    if (op == OP::TRANSFER_JETTON) {
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        throw_unless(ERROR::INSUFFICIENT_MSG_VALUE, msg_value >= TRANSFER_JETTON_FEE);
        slice jetton_wallet_address = in_msg_body~load_msg_addr();
        slice destination_address = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();
        cell transfer_body = begin_cell()
        .store_op(OP::TRANSFER_JETTON)
        .store_query_id(0)
        .store_coins(jetton_amount)
        .store_slice(destination_address)
        .store_slice(destination_address)
        .store_int(0, 1)
        .store_coins(0)
        .store_int(0, 1)
        .end_cell();
        send_msg(jetton_wallet_address, 0, transfer_body, FLAGS::NON_BOUNCEABLE, SEND_MODE::CARRY_ALL_REMAINING_MESSAGE_VALUE + SEND_MODE::IGNORE_ERRORS);
        return();
    }

    throw(ERROR::UNKNOWN_OP);
}


;; =============== getters =============================

(int, int, slice, cell, cell) get_jetton_data() method_id {
    load_data();

    return (jetton_total_supply, -1, admin_address, content, jetton_wallet_code);
}


(_) get_full_data() method_id {
    load_data();

    return (
        jetton_total_supply,
        ton_total_supply,
        commission_total_supply,
        commission_factor,
        commission_address,
        admin_address,
        transaction_address,
        content,
        jetton_wallet_code,
        unstake_request_code,
        last_lockup_epoch,
        lockup_supply,
        next_lockup_supply,
        later_lockup_supply,
        next_unstake_request_index
    );
}

slice get_wallet_address(slice owner_address) method_id {
    load_data();

    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}

slice get_unstake_request_address(int index) method_id {
    load_data();

    return calculate_index_unstake_request_address(index, my_address(), unstake_request_code);
}

int get_lockup_period() method_id {
    return TIME::LOCKUP_PERIOD;
}

int get_test_info() method_id {
    return true;
}
