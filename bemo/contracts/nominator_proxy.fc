;; =============== Nominator Proxy =====================

#include "imports/stdlib.fc";
#include "imports/utils.fc";
#pragma version >=0.4.0;

;; =============== consts =============================

const WITHDRAW_POOL_PROCESSING_FEE = 500000000; ;; 0.5 TON
const TWO_TON = 2000000000; ;; 2 TON
const MIN_NOMINATOR_STAKE = 10001000000000; ;; 10001 TON
const MIN_TON_FOR_STORAGE = 10000000; ;; 0.01 TON
const GAS_CONSUMPTION = 10000000; ;; 0.01 TON

;; time consts
const TIME::FIFTEEN_MINUTES = 900; ;; 900s = 15m * 60s
const TIME::TEN_HOURS = 36000; ;; 36000s = 60s * 60m * 10h

;; actions in pool
const ACTION::DEPOSIT = 100; ;; "d" - deposit
const ACTION::WITHDRAW = 119; ;; "w" - withdraw request

;; ops
const OP::SIMPLE_TRANSFER = 0;
const OP::RETURN_TON_TO_FINANCIAL = 1;
const OP::ACCEPT_TON = 2;

;; errors
const ERROR::UNKNOWN_ACTION = 202;
const ERROR::NOT_DEPOSITED = 203;
const ERROR::EXCESS_MSG_VALUE = 204;
const ERROR::WITHDRAW_HAS_ALREADY_BEEN_MADE = 205;
const ERROR::WITHDRAW_TIME_HAS_NOT_YET_COME = 206;


;; =============== storage =============================

(int, int, slice, slice, int, int, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32), ;; wallet_id
        ds~load_coins(), ;; deposit_amount
        ds~load_msg_addr(), ;; financial_address
        ds~load_msg_addr(), ;; nominator_pool_address
        ds~load_uint(64), ;; deposit_time
        ds~load_uint(64), ;; withdrawn_time
        ds~load_msg_addr() ;; last_withdraw_address - last address that requested a withdrawal
    );
}

() save_data(int wallet_id, int deposit_amount, slice financial_address, slice nominator_pool_address, int deposit_time, int withdrawn_time, slice last_withdraw_address) impure inline {
    set_data(begin_cell()
    .store_uint(wallet_id, 32)
    .store_coins(deposit_amount)
    .store_slice(financial_address)
    .store_slice(nominator_pool_address)
    .store_uint(deposit_time, 64)
    .store_uint(withdrawn_time, 64)
    .store_slice(last_withdraw_address)
    .end_cell()
    );
}


;; =============== utils =============================

() send_msg_to_nominator(slice nominator_pool_address, int deposit_amount, deposit?, int mode) impure inline {
    cell msg = begin_cell()
    .store_uint(FLAGS::BOUNCEABLE, 6) ;; flags
    .store_slice(nominator_pool_address)
    .store_coins(deposit_amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(0, 32)
    .store_uint(deposit? ? ACTION::DEPOSIT : ACTION::WITHDRAW, 8) ;; if true "d" - for deposit, if false "w" - for withdraw
    .end_cell();
    send_raw_message(msg, mode);
}

() on_bounce (slice in_msg_body, int msg_value) impure {
    in_msg_body~skip_bits(32); ;; 0xFFFFFFFF

    var (wallet_id, deposit_amount, financial_address, nominator_pool_address, deposit_time, withdrawn_time, last_withdraw_address) = load_data();

    int op = in_msg_body~load_uint(32);
    throw_unless(ERROR::NOT_BOUNCEABLE_OP, op == OP::SIMPLE_TRANSFER);

    int action = in_msg_body~load_uint(8);
    throw_unless(ERROR::UNKNOWN_ACTION, (action == ACTION::DEPOSIT) | (action == ACTION::WITHDRAW));

    if (action == ACTION::DEPOSIT) {
        deposit_amount -= msg_value;
        if (deposit_amount <= MIN_NOMINATOR_STAKE) {
            deposit_amount = 0;
        }
        send_msg(financial_address, 0, begin_cell().store_uint(9, 32).end_cell(), FLAGS::NON_BOUNCEABLE, SEND_MODE::REMAINING_AMOUNT);
    } else {
        send_msg(last_withdraw_address, 0, null(), FLAGS::NON_BOUNCEABLE, SEND_MODE::REMAINING_AMOUNT);
        last_withdraw_address = begin_cell().store_uint(0, 2).end_cell().begin_parse();
    }

    save_data(wallet_id, deposit_amount, financial_address, nominator_pool_address, deposit_time, withdrawn_time, last_withdraw_address);
}


;; =============== recv =============================

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    int balance = pair_first(get_balance());

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        on_bounce(in_msg_body, msg_value);
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body.slice_empty?() ? OP::SIMPLE_TRANSFER : in_msg_body~load_uint(32);

    var (wallet_id, deposit_amount, financial_address, nominator_pool_address, deposit_time, withdrawn_time, last_withdraw_address) = load_data();

    if (op == OP::SIMPLE_TRANSFER) {
        int ton_balance_before_msg = balance - msg_value;
        int storage_fee = MIN_TON_FOR_STORAGE - min(ton_balance_before_msg, MIN_TON_FOR_STORAGE);
        msg_value -= (storage_fee + GAS_CONSUMPTION);

        if (equal_slices(sender_address, financial_address)) {
            ;; deposit to nominator pool
            throw_unless(ERROR::INSUFFICIENT_BALANCE, msg_value > MIN_NOMINATOR_STAKE);

            if (deposit_amount == 0) {
                deposit_time = now();
            }

            deposit_amount += msg_value;

            send_msg_to_nominator(nominator_pool_address, msg_value, true, SEND_MODE::PAY_FEE_SEPARATELY + SEND_MODE::IGNORE_ERRORS);

        } elseif (equal_slices(sender_address, nominator_pool_address)) {
            if (msg_value <= TWO_TON){
                if (last_withdraw_address.preload_uint(2) != 0) {
                    send_msg(last_withdraw_address, 0, null(), FLAGS::NON_BOUNCEABLE, SEND_MODE::REMAINING_AMOUNT + SEND_MODE::IGNORE_ERRORS);
                    last_withdraw_address = begin_cell().store_uint(0, 2).end_cell().begin_parse();
                } else {
                    send_msg(financial_address, 0, begin_cell().store_uint(9, 32).end_cell(), FLAGS::NON_BOUNCEABLE, SEND_MODE::REMAINING_AMOUNT + SEND_MODE::IGNORE_ERRORS);
                }
            } else {
                int reward = msg_value - deposit_amount;
                reward = reward < 0 ? 0 : reward;
                send_msg(financial_address, msg_value, begin_cell().store_uint(1, 32).store_coins(reward).end_cell(), FLAGS::NON_BOUNCEABLE, SEND_MODE::PAY_FEE_SEPARATELY + SEND_MODE::IGNORE_ERRORS);
                deposit_amount = 0;
            }
        } else {
            ;; request withdraw if deposited and deposit_time equal or bigger than (now - 10 hours)
            throw_unless(ERROR::NOT_DEPOSITED, deposit_amount != 0);
            throw_unless(ERROR::INSUFFICIENT_BALANCE, msg_value >= WITHDRAW_POOL_PROCESSING_FEE);
            throw_unless(ERROR::EXCESS_MSG_VALUE, msg_value <= TWO_TON);
            throw_unless(ERROR::WITHDRAW_TIME_HAS_NOT_YET_COME, now() - deposit_time >= TIME::TEN_HOURS);
            throw_unless(ERROR::WITHDRAW_HAS_ALREADY_BEEN_MADE, now() - withdrawn_time >= TIME::FIFTEEN_MINUTES);

            withdrawn_time = now();
            last_withdraw_address = sender_address;

            send_msg_to_nominator(nominator_pool_address, 0, false, SEND_MODE::REMAINING_AMOUNT + SEND_MODE::IGNORE_ERRORS);
        }
        save_data(wallet_id, deposit_amount, financial_address, nominator_pool_address, deposit_time, withdrawn_time, last_withdraw_address);
        return ();
    }

    if (op == OP::RETURN_TON_TO_FINANCIAL) {
        throw_unless(ERROR::INSUFFICIENT_BALANCE, balance > MIN_TON_FOR_STORAGE);
        send_msg(financial_address, balance - MIN_TON_FOR_STORAGE, begin_cell().store_uint(9, 32).end_cell(), FLAGS::NON_BOUNCEABLE, SEND_MODE::IGNORE_ERRORS);
        return ();
    }

    if (op == OP::ACCEPT_TON) { ;; just accept ton
        return();
    }

    throw(ERROR::UNKNOWN_OP);
}


;; =============== getters =============================

(int, int, slice, slice, int, int, slice) get_proxy_data() method_id {
    return load_data();
}
