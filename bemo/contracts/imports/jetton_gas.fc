#include "precompiled_gas_const.fc";

() check_amount_is_enough_to_transfer(int msg_value, int forward_ton_amount, int fwd_fee) impure inline {
    int fwd_count = forward_ton_amount ? 2 : 1; ;; second sending (forward) will be cheaper that first

    int jetton_wallet_gas_consumption = get_precompiled_gas_consumption();
    int send_transfer_gas_consumption = null?(jetton_wallet_gas_consumption) ? SEND_TRANSFER_GAS_CONSUMPTION : jetton_wallet_gas_consumption;
    int receive_transfer_gas_consumption = null?(jetton_wallet_gas_consumption) ? RECEIVE_TRANSFER_GAS_CONSUMPTION : jetton_wallet_gas_consumption;

    throw_unless(ERROR::NOT_ENOUGH_GAS,
        msg_value >
        forward_ton_amount +
        ;; 3 messages: wal1->wal2, wal2->owner, wal2->response
        ;; but last one is optional (it is ok if it fails)
        fwd_count * fwd_fee +
        jetton_wallet_forward_init_state_overhead() + ;; additional fwd fees related to initstate in internal_transfer
        get_compute_fee(BASECHAIN, send_transfer_gas_consumption) +
        get_compute_fee(BASECHAIN, receive_transfer_gas_consumption) +
        calculate_jetton_wallet_min_storage_fee()
    );
}

() check_amount_is_enough_to_burn(int msg_value, cell msg_body, cell forward_payload) impure inline {
    int jetton_wallet_gas_consumption = get_precompiled_gas_consumption();
    int burn_gas_consumption = null?(jetton_wallet_gas_consumption) ? BURN_GAS_CONSUMPTION : jetton_wallet_gas_consumption;

    var (msg_body_cells, msg_body_bits, _) = compute_data_size(msg_body, 8192);

    throw_unless(ERROR::NOT_ENOUGH_GAS,
        msg_value >
        ;; 4 messages: wallet->financial, financial->unstake_request, unstake_request->financial, financial->user
        4 * get_forward_fee(BASECHAIN, msg_body_bits, msg_body_cells) +
        get_compute_fee(BASECHAIN, burn_gas_consumption) +
        get_compute_fee(BASECHAIN, BURN_NOTIFICATION_GAS_CONSUMPTION) +
        get_compute_fee(BASECHAIN, DEPLOY_UNSTAKE_REQUEST_GAS_CONSUMPTION) +
        calculate_unstake_request_min_storage_fee(forward_payload) +
        get_compute_fee(BASECHAIN, UNSTAKE_GAS_CONSUMPTION) +
        calculate_financial_min_storage_fee()
    );
}