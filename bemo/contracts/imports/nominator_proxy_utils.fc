cell pack_nominator_proxy_data(int wallet_id, int deposit_amount, slice financial_address, slice nominator_pool_address, int deposit_time, int withdrawn_time, slice last_withdraw_address) impure inline {
    return begin_cell()
            .store_uint(wallet_id, 32)
            .store_coins(deposit_amount)
            .store_slice(financial_address)
            .store_slice(nominator_pool_address)
            .store_uint(deposit_time, 64)
            .store_uint(withdrawn_time, 64)
            .store_slice(last_withdraw_address)
            .end_cell();
}

cell calculate_nominator_proxy_state_init(int wallet_id, slice financial_address, slice nominator_pool_address, cell nominator_proxy_code) inline {
    var addr_none = begin_cell().store_uint(0,2).end_cell().begin_parse();
    return begin_cell()
            .store_uint(0, 2)
            .store_dict(nominator_proxy_code)
            .store_dict(pack_nominator_proxy_data(wallet_id, 0, financial_address, nominator_pool_address, 0, 0, addr_none))
            .store_uint(0, 1)
            .end_cell();
}

slice calculate_nominator_proxy_address_by_state_init(cell state_init) inline {
    return begin_cell()
            .store_uint(4, 3)
            .store_int(BASECHAIN, 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}

slice calculate_nominator_proxy_address(int wallet_id, slice financial_address, slice nominator_pool_address, cell nominator_proxy_code) inline {
    return calculate_nominator_proxy_address_by_state_init(calculate_nominator_proxy_state_init(wallet_id, financial_address, nominator_pool_address, nominator_proxy_code));
}

cell pack_nominator_pool_data(int state, int nominators_count, int stake_amount_sent, int validator_amount, cell config, cell nominators, cell withdraw_requests, int stake_at, int saved_validator_set_hash, int validator_set_changes_count, int validator_set_change_time, int stake_held_for, cell config_proposal_votings) impure inline {
    return begin_cell()
            .store_uint(state, 8)
            .store_uint(nominators_count, 16)
            .store_coins(stake_amount_sent)
            .store_coins(validator_amount)
            .store_ref(config)
            .store_dict(nominators)
            .store_dict(withdraw_requests)
            .store_uint(stake_at, 32)
            .store_uint(saved_validator_set_hash, 256)
            .store_uint(validator_set_changes_count, 8)
            .store_uint(validator_set_change_time, 32)
            .store_uint(stake_held_for, 32)
            .store_dict(config_proposal_votings)
            .end_cell();
}

cell calculate_nominator_pool_state_init(int validator_address, int validator_reward_share, int max_nominators_count, int min_validator_stake, int min_nominator_stake, cell nominator_pool_code) inline {

    var config = begin_cell()
            .store_uint(validator_address, 256)
            .store_uint(validator_reward_share, 16)
            .store_uint(max_nominators_count, 16)
            .store_coins(min_validator_stake)
            .store_coins(min_nominator_stake)
            .end_cell();

    return begin_cell()
            .store_uint(0, 2)
            .store_dict(nominator_pool_code)
            .store_dict(pack_nominator_pool_data(0, 0, 0, 0, config, new_dict(), new_dict(), 0, 0, 0, 0, 0, new_dict()))
            .store_uint(0, 1)
            .end_cell();
}

slice calculate_nominator_pool_address_by_state_init(cell state_init) inline {
    return begin_cell()
            .store_uint(4, 3)
            .store_int(MASTERCHAIN, 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}

slice calculate_nominator_pool_address(int validator_address, int validator_reward_share, int max_nominators_count, int min_validator_stake, int min_nominator_stake, cell nominator_pool_code) inline {
    return calculate_nominator_pool_address_by_state_init(calculate_nominator_pool_state_init(validator_address, validator_reward_share, max_nominators_count, min_validator_stake, min_nominator_stake, nominator_pool_code));
}

