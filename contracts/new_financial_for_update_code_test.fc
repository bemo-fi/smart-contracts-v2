;; =============== Financial =====================

#include "imports/stdlib.fc";
#include "imports/utils.fc";
#include "imports/jetton-utils.fc";
#pragma version >=0.2.0;

;; =============== consts =============================

const DEPOSIT_PROCESSING_FEE = 50000000; ;; 0.05 TON
const MIN_TON_FOR_STORAGE = 50000000; ;; 0.05 TON
const GAS_CONSUMPTION = 15000000; ;; 0.015 TON
const TON_FOR_JETTON_MINT = 20000000; ;; 0.02 TON
;; 6905(computational_gas_price) * 1000(cur_gas_price) = 6905000
;; ceil(6905000) = 10000000 ~= 0.01 TON
const PROVIDE_ADDRESS_GAS_CONSUMPTION = 10000000;
const COMMISSION_BASE = 1000;

;; anyone ops
const OP::SIMPLE_TRANSFER = 0;
const OP::ACCEPT_REWARD = 1;
const OP::PROVIDE_WALLET_ADDRESS = 0x2c76b973;
const OP::TAKE_WALLET_ADDRESS = 0xd1735400;
const OP::ACCEPT_TON = 9;

;; jetton wallet ops
const OP::INTERNAL_TRANSFER = 0x178d4519;
const OP::BURN_NOTIFICATION = 0x7bdd97de;
const OP::INTERNAL_TRANSFER_WITH_LOCKUP = 4;

;; admin ops
const OP::CHANGE_ADMIN = 2;
const OP::CHANGE_TRANSACTION_ADMIN = 3;
const OP::CHANGE_CONTENT = 4;
const OP::CHANGE_COMMISSION_FACTOR = 5;
const OP::CHANGE_COMMISSION_ADDRESS = 6;
const OP::SEND_COMMISSION = 80;
const OP::UPDATE_CODE = 5000;

;; transaction admin ops
const OP::SEND_TON_FROM_FINANCIAL = 70;

;; errors
const ERROR::NOT_FROM_ADMIN = 73;
const ERROR::NOT_FROM_JETTON_WALLET = 74;
const ERROR::NOT_FROM_TRANSACTION_ADMIN = 75;

const ERROR::INSUFFICIENT_COMMISSION_BALANCE = 104;
const ERROR::MSG_VALUE_LESS_THAN_REWARD = 105;


;; =============== storage =============================

(int, int, int, int, slice, slice, slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
            ds~load_coins(), ;; jetton_total_supply
            ds~load_coins(), ;; ton_total_supply
            ds~load_coins(), ;; commission_total_supply
            ds~load_uint(16), ;; commission_factor
            ds~load_msg_addr(), ;; commission_address
            ds~load_msg_addr(), ;; admin_address
            ds~load_msg_addr(), ;; transaction_address
            ds~load_ref(), ;; content
            ds~load_ref() ;; jetton_wallet_code
    );
}

() save_data(int jetton_total_supply, ton_total_supply, commission_total_supply, commission_factor, slice commission_address, admin_address, transaction_address, cell content, jetton_wallet_code) impure inline {
    set_data(begin_cell()
            .store_coins(jetton_total_supply)
            .store_coins(ton_total_supply)
            .store_coins(commission_total_supply)
            .store_uint(commission_factor, 16)
            .store_slice(commission_address)
            .store_slice(admin_address)
            .store_slice(transaction_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
            .end_cell()
    );
}


;; =============== utils =============================

int is_resolvable?(slice addr) inline {
    (int wc, _) = parse_std_addr(addr);

    return wc == WORKCHAIN;
}

() mint(slice to_address, int jetton_amount, int ton_amount, query_id, cell jetton_wallet_code, int with_lockup) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);

    var addr_none = begin_cell().store_uint(0, 2).end_cell().begin_parse();

    cell receive_msg = with_lockup

            ? begin_cell()
            .store_uint(OP::INTERNAL_TRANSFER_WITH_LOCKUP, 32)
            .store_coins(jetton_amount)
            .end_cell()

            : begin_cell()
            .store_uint(OP::INTERNAL_TRANSFER, 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(addr_none)
            .store_slice(to_address)
            .store_coins(0)
            .store_int(0, 1)
            .end_cell();

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(to_wallet_address)
            .store_coins(TON_FOR_JETTON_MINT + ton_amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(receive_msg);

    send_raw_message(msg.end_cell(), 1);
}


;; =============== recv =============================

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    int balance = pair_first(get_balance());

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    (int sender_wc, _) = parse_std_addr(sender_address);

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of provide_wallet_address cost

    int op = in_msg_body.slice_empty?() ? OP::SIMPLE_TRANSFER : in_msg_body~load_uint(32);

    var (jetton_total_supply, ton_total_supply, commission_total_supply, commission_factor, commission_address, admin_address, transaction_address, content, jetton_wallet_code) = load_data();

    if (op == OP::SIMPLE_TRANSFER) {
        throw_unless(ERROR::NOT_WORKCHAIN, sender_wc == WORKCHAIN); ;; only in basechain

        int stake_ton_amount = msg_value - DEPOSIT_PROCESSING_FEE;
        throw_unless(ERROR::INSUFFICIENT_BALANCE, stake_ton_amount > 0);

        int stake_jetton_amount = muldiv(jetton_total_supply, stake_ton_amount, ton_total_supply);

        jetton_total_supply += stake_jetton_amount;
        ton_total_supply += stake_ton_amount;
        save_data(jetton_total_supply, ton_total_supply, commission_total_supply, commission_factor, commission_address, admin_address, transaction_address, content, jetton_wallet_code);

        mint(sender_address, stake_jetton_amount, 0, 0, jetton_wallet_code, true);
        return ();
    }

    if (op == OP::ACCEPT_REWARD) { ;; accept coins with reward
        int reward = in_msg_body~load_coins();
        throw_unless(ERROR::MSG_VALUE_LESS_THAN_REWARD, msg_value >= reward);

        if (reward > 0) {
            int commission = muldiv(reward, commission_factor, COMMISSION_BASE);
            ton_total_supply += (reward - commission);
            commission_total_supply += commission;
            save_data(jetton_total_supply, ton_total_supply, commission_total_supply, commission_factor, commission_address, admin_address, transaction_address, content, jetton_wallet_code);
        }
        return ();
    }

    if (op == OP::BURN_NOTIFICATION) {
        int query_id = in_msg_body~load_uint(64);
        int withdraw_jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(ERROR::NOT_FROM_JETTON_WALLET,
                equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );

        int withdraw_ton_amount = muldiv(ton_total_supply, withdraw_jetton_amount, jetton_total_supply);

        int ton_balance_before_msg = balance - msg_value;
        int storage_fee = MIN_TON_FOR_STORAGE - min(ton_balance_before_msg, MIN_TON_FOR_STORAGE);
        msg_value -= (storage_fee + GAS_CONSUMPTION);

        if (withdraw_ton_amount > (balance - commission_total_supply - MIN_TON_FOR_STORAGE)) {
            msg_value -= TON_FOR_JETTON_MINT;
            mint(from_address, withdraw_jetton_amount, msg_value, query_id, jetton_wallet_code, false);
        } else {
            ton_total_supply -= withdraw_ton_amount;
            jetton_total_supply -= withdraw_jetton_amount;
            save_data(jetton_total_supply, ton_total_supply, commission_total_supply, commission_factor, commission_address, transaction_address, admin_address, content, jetton_wallet_code);
            send_msg(from_address, withdraw_ton_amount + msg_value, null(), FLAGS::NON_BOUNCEABLE, 0); ;; non-bounceable, fee deducted from amount, ignore errors
        }
        return ();
    }

    if (op == OP::PROVIDE_WALLET_ADDRESS) {
        int query_id = in_msg_body~load_uint(64);
        throw_unless(75, msg_value > fwd_fee + PROVIDE_ADDRESS_GAS_CONSUMPTION);

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
                ? begin_cell().store_slice(owner_address).end_cell()
                : null();

        var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(sender_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(OP::TAKE_WALLET_ADDRESS, 32)
                .store_uint(query_id, 64);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code));
        } else {
            msg = msg.store_uint(0, 2); ;; addr_none
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), SEND_MODE::REMAINING_AMOUNT);
        return ();
    }

    if (op == OP::CHANGE_ADMIN) { ;; change admin
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(jetton_total_supply, ton_total_supply, commission_total_supply, commission_factor, commission_address, new_admin_address, transaction_address, content, jetton_wallet_code);
        return ();
    }

    if (op == OP::CHANGE_TRANSACTION_ADMIN) { ;; change transaction admin
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        slice new_transaction_address = in_msg_body~load_msg_addr();
        save_data(jetton_total_supply, ton_total_supply, commission_total_supply, commission_factor, commission_address, admin_address, new_transaction_address, content, jetton_wallet_code);
        return ();
    }

    if (op == OP::CHANGE_CONTENT) { ;; change content, delete this for immutable tokens
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        save_data(jetton_total_supply, ton_total_supply, commission_total_supply, commission_factor, commission_address, admin_address, transaction_address, in_msg_body~load_ref(), jetton_wallet_code);
        return ();
    }

    if (op == OP::CHANGE_COMMISSION_FACTOR) { ;; change commission factor
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        save_data(jetton_total_supply, ton_total_supply, commission_total_supply, in_msg_body~load_uint(16), commission_address, admin_address, transaction_address, content, jetton_wallet_code);
        return ();
    }

    if (op == OP::CHANGE_COMMISSION_ADDRESS) { ;; change commission address
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        save_data(jetton_total_supply, ton_total_supply, commission_total_supply, commission_factor, in_msg_body~load_msg_addr(), admin_address, transaction_address, content, jetton_wallet_code);
        return ();
    }

    int ton_balance_before_msg = balance - msg_value;

    if (op == OP::SEND_TON_FROM_FINANCIAL) { ;; send ton
        throw_unless(ERROR::NOT_FROM_TRANSACTION_ADMIN, equal_slices(sender_address, transaction_address));
        slice destination_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        var payload = in_msg_body~load_ref();
        throw_unless(ERROR::INSUFFICIENT_BALANCE, ton_balance_before_msg - commission_total_supply - MIN_TON_FOR_STORAGE >= amount);
        send_msg(destination_address, amount, payload, FLAGS::BOUNCEABLE, SEND_MODE::PAY_FEE_SEPARATELY + SEND_MODE::IGNORE_ERRORS);
        send_msg(sender_address, 0, null(), FLAGS::NON_BOUNCEABLE, SEND_MODE::IGNORE_ERRORS + SEND_MODE::REMAINING_AMOUNT);
        return ();
    }

    if (op == OP::SEND_COMMISSION) { ;; send commission
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        throw_unless(ERROR::INSUFFICIENT_COMMISSION_BALANCE, commission_total_supply > 0);
        throw_unless(ERROR::INSUFFICIENT_BALANCE, ton_balance_before_msg - commission_total_supply - MIN_TON_FOR_STORAGE >= 0);
        send_msg(commission_address, commission_total_supply, null(), FLAGS::NON_BOUNCEABLE, SEND_MODE::PAY_FEE_SEPARATELY + SEND_MODE::IGNORE_ERRORS);
        send_msg(sender_address, 0, null(), FLAGS::NON_BOUNCEABLE, SEND_MODE::IGNORE_ERRORS + SEND_MODE::REMAINING_AMOUNT);
        save_data(jetton_total_supply, ton_total_supply, 0, commission_factor, commission_address, admin_address, transaction_address, content, jetton_wallet_code);
        return ();
    }

    if (op == OP::ACCEPT_TON) { ;; just accept ton
        return ();
    }

    if (op == OP::UPDATE_CODE) { ;; upgrade code
        throw_unless(ERROR::NOT_FROM_ADMIN, equal_slices(sender_address, admin_address));
        var new_code = in_msg_body~load_ref();
        set_code(new_code);
        return ();
    }

    throw(ERROR::UNKNOWN_OP);
}


;; =============== getters =============================

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int jetton_total_supply, _, _, _, _, slice admin_address, _, cell content, cell jetton_wallet_code) = load_data();
    return (jetton_total_supply, -1, admin_address, content, jetton_wallet_code);
}

(int, int, int, int, slice, slice, slice, cell, cell) get_full_data() method_id {
    return load_data();
}

slice get_wallet_address(slice owner_address) method_id {
    (_, _, _, _, _, slice admin_address, _, cell content, cell jetton_wallet_code) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}

int get_test_info() method_id {
    return true;
}
